openapi: 3.0.3
info:
  title: Turn-Based Card Game API
  version: v1
  description: |
    OpenAPI spec generated from `specs/client-server.md`.
    Provides REST endpoints for lobby, seating, game lifecycle, moves, and recovery.
servers:
  - url: https://api.example.com/v1
    description: Production API
security:
  - bearerAuth: []
tags:
  - name: Health
  - name: Auth
  - name: Rooms
  - name: Games
  - name: Turns
  - name: Moves
  - name: Admin
  - name: Streaming
    description: Socket.IO (WebSocket-first) realtime channels for room and game updates.
paths:
  /health:
    get:
      tags: [Health]
      summary: Health check
      security: []
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
  /auth/oauth/token:
    post:
      tags: [Auth]
      summary: Exchange provider code + PKCE for platform tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [provider, authorizationCode, pkceVerifier]
              properties:
                provider:
                  type: string
                  enum: [google, facebook]
                authorizationCode:
                  type: string
                pkceVerifier:
                  type: string
      responses:
        '200':
          description: Tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: Bearer JWT
                  refreshToken:
                    type: string
                  expiresIn:
                    type: integer
                    description: Access token TTL in seconds (e.g., 900)
        '400': { $ref: '#/components/responses/BadRequest' }
  /rooms:
    post:
      tags: [Rooms]
      summary: Create room
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [gameType, maxSeats, visibility, rulesetVersion]
              properties:
                gameType:
                  type: string
                  example: coinche
                maxSeats:
                  type: integer
                  example: 4
                visibility:
                  type: string
                  enum: [public, private]
                rulesetVersion:
                  type: string
                  example: '2024.09'
                metadata:
                  type: object
                  additionalProperties: true
      responses:
        '201':
          description: Room created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '400': { $ref: '#/components/responses/BadRequest' }
    get:
      tags: [Rooms]
      summary: List rooms
      parameters:
        - in: query
          name: gameType
          schema: { type: string }
        - in: query
          name: visibility
          schema: { type: string, enum: [public, private] }
        - in: query
          name: status
          schema: { type: string, enum: [lobby, in_progress, completed] }
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: Paginated rooms
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Room' }
                  page:
                    type: integer
                  pageSize:
                    type: integer
                  total:
                    type: integer
  /rooms/{roomId}/join:
    post:
      tags: [Rooms]
      summary: Join room
      parameters:
        - $ref: '#/components/parameters/RoomId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                seatIndex:
                  type: integer
                asSpectator:
                  type: boolean
                  default: false
      responses:
        '200':
          description: Joined
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
  /rooms/{roomId}/leave:
    post:
      tags: [Rooms]
      summary: Leave room
      parameters:
        - $ref: '#/components/parameters/RoomId'
      responses:
        '200':
          description: Left
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '404': { $ref: '#/components/responses/NotFound' }
  /rooms/{roomId}/seats/{playerId}/remove:
    post:
      tags: [Rooms]
      summary: Kick player from seat (host only)
      parameters:
        - $ref: '#/components/parameters/RoomId'
        - in: path
          name: playerId
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Updated room
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
        '404': { $ref: '#/components/responses/NotFound' }
  /rooms/{roomId}/ready:
    post:
      tags: [Rooms]
      summary: Toggle player readiness
      parameters:
        - $ref: '#/components/parameters/RoomId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ready]
              properties:
                ready:
                  type: boolean
      responses:
        '200':
          description: Updated room
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Room' }
  /rooms/{roomId}/lock:
    post:
      tags: [Rooms]
      summary: Lock room (prevent joins)
      parameters:
        - $ref: '#/components/parameters/RoomId'
      responses:
        '200': { description: Locked }
  /rooms/{roomId}/unlock:
    post:
      tags: [Rooms]
      summary: Unlock room
      parameters:
        - $ref: '#/components/parameters/RoomId'
      responses:
        '200': { description: Unlocked }
  /rooms/{roomId}/start:
    post:
      tags: [Games]
      summary: Start game from room
      parameters:
        - $ref: '#/components/parameters/RoomId'
      responses:
        '201':
          description: Game created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GameState' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
  /games/{gameId}:
    get:
      tags: [Games]
      summary: Get game snapshot
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Game state
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GameState' }
  /games/{gameId}/state:
    get:
      tags: [Games]
      summary: Get incremental state (or full if omitted)
      parameters:
        - $ref: '#/components/parameters/GameId'
        - $ref: '#/components/parameters/SinceVersion'
      responses:
        '200':
          description: State or diff
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/GameState'
                  - type: object
                    description: Incremental diff
                    additionalProperties: true
  /games/{gameId}/turns/current:
    get:
      tags: [Turns]
      summary: Get current turn metadata
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Current turn info
          content:
            application/json:
              schema:
                type: object
                properties:
                  turnId: { type: string }
                  activePlayerId: { type: string }
                  legalMoveTypes:
                    type: array
                    items: { type: string }
                  deadline:
                    type: string
                    format: date-time
                  turnSequence:
                    type: array
                    items: { type: string }
  /games/{gameId}/me/hand:
    get:
      tags: [Games]
      summary: Get private hand (caller only)
      parameters:
        - $ref: '#/components/parameters/GameId'
      responses:
        '200':
          description: Private hand
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PrivateHand' }
  /games/{gameId}/turns/current/move:
    post:
      tags: [Moves]
      summary: Submit move for current turn
      parameters:
        - $ref: '#/components/parameters/GameId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MoveSubmission' }
      responses:
        '200':
          description: Move accepted with result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MoveResult' }
        '202': { description: Accepted for async processing }
        '400': { $ref: '#/components/responses/BadRequest' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }
  /games/{gameId}/moves/{moveId}/invalidate:
    post:
      tags: [Admin]
      summary: Invalidate a move (admin override)
      parameters:
        - $ref: '#/components/parameters/GameId'
        - $ref: '#/components/parameters/MoveId'
      responses:
        '200': { description: Move invalidated }
  /games/{gameId}/events:
    get:
      tags: [Streaming]
      summary: Replay missed events after a given event ID
      parameters:
        - $ref: '#/components/parameters/GameId'
        - in: query
          name: after
          required: false
          schema: { type: string }
      responses:
        '200':
          description: Events list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/EventEnvelope' }
  /socket.io/:
    get:
      tags: [Streaming]
      summary: Socket.IO handshake endpoint (managed by Socket.IO SDK)
      description: |
        Clients initiate a WebSocket-first connection via Socket.IO using `wss://api.example.com/v1/socket.io/`.
        The server assigns the client to channels (rooms) such as `game:{gameId}:public` or
        `game:{gameId}:private:{playerId}` based on subsequent `join` emits. This endpoint is typically
        consumed by the Socket.IO client library and is documented here for completeness.
      parameters:
        - in: query
          name: EIO
          required: false
          schema:
            type: string
            example: '4'
        - in: query
          name: transport
          required: false
          schema:
            type: string
            enum: [polling, websocket]
          description: Socket.IO transport negotiation. Clients should prefer `websocket`.
      responses:
        '101':
          description: WebSocket upgrade initiated.
        '200':
          description: HTTP long-polling fallback (only used when WebSockets are unavailable).
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    RoomId:
      in: path
      name: roomId
      required: true
      schema: { type: string }
    GameId:
      in: path
      name: gameId
      required: true
      schema: { type: string }
    MoveId:
      in: path
      name: moveId
      required: true
      schema: { type: string }
    SinceVersion:
      in: query
      name: sinceVersion
      required: false
      schema: { type: integer }
    Page:
      in: query
      name: page
      required: false
      schema: { type: integer, minimum: 1, default: 1 }
    PageSize:
      in: query
      name: pageSize
      required: false
      schema: { type: integer, minimum: 1, maximum: 200, default: 20 }
    IdempotencyKey:
      in: header
      name: Idempotency-Key
      required: false
      schema: { type: string }
  responses:
    BadRequest:
      description: Invalid payload
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Unauthorized:
      description: Missing/expired token
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Forbidden:
      description: Role/permission mismatch
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    Conflict:
      description: Version conflict or seat conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    UnprocessableEntity:
      description: Rules violation or unmet preconditions
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
  schemas:
    Seat:
      type: object
      properties:
        index: { type: integer }
        playerId:
          type: string
          nullable: true
        ready: { type: boolean }
    Room:
      type: object
      properties:
        roomId: { type: string }
        gameType: { type: string }
        status: { type: string, enum: [lobby, in_progress, completed] }
        hostId: { type: string }
        maxSeats: { type: integer }
        seats:
          type: array
          items: { $ref: '#/components/schemas/Seat' }
        metadata:
          type: object
          additionalProperties: true
        createdAt:
          type: string
          format: date-time
    GameState:
      type: object
      properties:
        gameId: { type: string }
        roomId: { type: string }
        status: { type: string, enum: [in_progress, completed, paused] }
        turnId: { type: string }
        turnOrder:
          type: array
          items: { type: string }
        stateVersion: { type: integer }
        score:
          type: object
          properties:
            teamA: { type: integer }
            teamB: { type: integer }
        contracts:
          type: array
          items:
            type: object
            properties:
              team: { type: string, enum: [teamA, teamB] }
              type: { type: string, enum: [clubs, diamonds, hearts, spades, no_trump, all_trump] }
              value: { type: integer }
              coinched: { type: boolean }
              surcoinched: { type: boolean }
        tricks:
          description: Omitted for brevity
          type: array
          items: { type: object }
        lastUpdated:
          type: string
          format: date-time
    MoveSubmission:
      type: object
      required: [clientMoveId, moveType, stateVersion]
      properties:
        clientMoveId:
          type: string
          format: uuid
        moveType:
          type: string
          example: play_card
        payload:
          type: object
          additionalProperties: true
          example:
            card: 'J♠'
        stateVersion:
          type: integer
    MoveResult:
      type: object
      properties:
        moveId: { type: string }
        clientMoveId: { type: string }
        validationStatus: { type: string, enum: [accepted, rejected] }
        turnId: { type: string }
        stateVersion: { type: integer }
        effects:
          type: object
          additionalProperties: true
        occurredAt:
          type: string
          format: date-time
    EventEnvelope:
      type: object
      properties:
        eventId: { type: string }
        eventType: { type: string }
        occurredAt:
          type: string
          format: date-time
        source: { type: string }
        gameId: { type: string }
        payload:
          type: object
          additionalProperties: true
    PrivateHand:
      type: object
      properties:
        playerId: { type: string }
        gameId: { type: string }
        cards:
          type: array
          items: { type: string }
        handVersion: { type: integer }
        lastUpdated:
          type: string
          format: date-time
    PublicHandSummary:
      type: object
      properties:
        gameId: { type: string }
        handCounts:
          type: object
          additionalProperties:
            type: integer
    SocketAck:
      type: object
      description: Generic acknowledgement envelope returned from Socket.IO acknowledgements.
      properties:
        ok:
          type: boolean
        stateVersion:
          type: integer
          description: Included when move actions update the authoritative state.
        error:
          type: string
          description: Reason provided when the acknowledgement represents a failure.
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details:
              type: object
              additionalProperties: true
            correlationId: { type: string }
